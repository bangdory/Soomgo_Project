<?xml version="1.0" encoding="UTF-8"?>
<!-- Mapping 설정은 root-context 에서 mybatis property 추가할 것-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.soomgo.soomgo_project.mappers.request.RequestMapper">
    <insert id="insert" parameterType="RequestDTO">
        <selectKey order="AFTER" keyProperty="id" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into request (userNum, regDate, category, type, sub, file1, file2, cr, amount, addService, result, day, time,
        age, sex, fav, place, date, region, ref)
        values (#{userNum}, #{regDate}, #{category}, #{type}, #{sub}, #{file1}, #{file2}, #{cr}, #{amount},
        #{addService},
        #{result}, #{day}, #{time}, #{age},
        #{sex}, #{fav}, #{place}, #{date}, #{region}, #{ref})
    </insert>

    <select id="select" resultType="RequestDTO">
        <!--        select * from test where id = #{id}-->
        select * from request where id = #{id}
        SELECT r.*
        FROM request r
        INNER JOIN expert e
        ON r.region = (select t.district from territory t where t.no = e.region)
        AND r.type = (select c.CategoryName from category c where c.CategoryNum = e.category_num)
        WHERE r.id = #{id}
        ORDER BY r.regDate DESC
    </select>

    <select id="getListByClientNo" parameterType="int" resultType="RequestDTO">
        <!--        select * from test where id > 0 order by id desc-->
        select * from request where userNum = #{clientId} AND id > 0 order by id desc
    </select>

    <select id="readRequestByExpertNum" parameterType="int" resultType="RequestDTO">
        SELECT r.*
        FROM request r
        INNER JOIN expert e
        ON r.region = (select t.district from territory t where t.no = e.region)
        AND r.type = (select c.CategoryName from category c where c.CategoryNum = e.category_num)
        WHERE e.expert_num = #{expertNum}
        ORDER BY r.regDate DESC
    </select>

    <select id="answeredRequestByExpertNum" parameterType="int" resultType="RequestDTO">
        SELECT r.*
        FROM request r
        INNER JOIN expert e
        ON r.expertNum = (select u.user_name from user u where u.user_num = e.user_num)
        AND r.type = (select c.CategoryName from category c where c.CategoryNum = e.category_num)
        WHERE e.expert_num = #{expertNum}
        ORDER BY r.regDate DESC

    </select>

    <insert id="answerRequest" parameterType="AnswerRequestDTO">
        <selectKey order="AFTER" keyProperty="no" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO AnswerRequest (RequestId, type, GosuId, price, ref, file)
        SELECT r.id, r.type, g.id, #{price}, #{ref}, #{file}
        FROM request r
        INNER JOIN gtest g
        ON r.type = g.type
        WHERE r.id = #{requestId} AND g.id = #{gosuId};
    </insert>

    <select id="findExpert" parameterType="int" resultType="ExpertDTO">
        select * from expert where expert_num = #{expertNum}
    </select>

    <select id="findAllStates" resultType="string">
        SELECT DISTINCT state
        FROM territory;
    </select>

    <select id="findTerritoryByState" parameterType="String" resultType="TerritoryDTO">
        <!--SELECT district
        FROM territory
        WHERE id IN (
        SELECT id
        FROM territory
        WHERE state = #{state}
        ) AND district IS NOT NULL;-->
        SELECT no, id, state, district
        FROM territory
        WHERE id IN (
        SELECT id
        FROM territory
        WHERE state = #{state}
        ) AND district IS NOT NULL;
    </select>

    <select id="findAllCategory" resultType="String">
        SELECT CategoryName from category where P_Id is null order by id
    </select>
    <select id="findType" resultType="CategoryDTO" parameterType="String">
        SELECT CategoryNum, Id, P_Id, CategoryName
        FROM category
        WHERE CategoryName IN (
        SELECT CategoryName
        FROM category
        WHERE P_Id = (
        SELECT Id
        FROM category
        WHERE CategoryName = #{type}
        )
        AND P_Id IS NOT NULL
        )
    </select>

    <select id="selectedType" resultType="CategoryDTO" parameterType="String">
        SELECT CategoryNum, Id, P_Id, CategoryName
        FROM category
        WHERE CategoryName = #{selectedType}
    </select>

    <update id="update" parameterType="AnswerRequestDTO"> <!-- 사용 안할 예정 -->
        update request
        set replier = CASE
        WHEN replier IS NULL THEN #{newReplier}
        ELSE CONCAT(replier, ',#{newReplier}')
        END
        where id = #{requestId}
    </update>
</mapper>