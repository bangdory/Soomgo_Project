RequestService 는 BEAN 등록이 되지 않을 수 있으므로
root-context 에서 component 스캔 해줄것
RequestService 에서 Transaction 처리 (여러개의 객체가 한가지의 작업을 하기 때문)
컨트롤러와 영속(DB) 사이의 본드 역할
고객의 요구사항

-- 웹 계층 처리
접근 순서
    URI 설계 (엑셀로?)
    Method 설계 (GET / POST)
    Query String / Params (쿼리 스트링? -> 페이징 처리, @PathVariable?)
    컨트롤러
    Method
    VIEW (jsp? Redirect?)



-- db

create DATABASE soomgodb;
CREATE TABLE reqsend
(
    id         INT AUTO_INCREMENT PRIMARY KEY NOT NULL, -- 제안서 번호
    writer     varchar(20)                    NOT NULL, -- newbie 번호
    regDate    TIMESTAMP default now()        NOT NULL, -- 제안서 작성 시간
    sort       varchar(20)                    NOT NULL, -- 서비스 종류
    type       varchar(20)                    NOT NULL, -- 필요한 서비스(1)
    sub        varchar(20),                             -- 필요한 서비스(2)
    file1      JSON,                                    -- 사전 보유 파일, 지식, 진행단계 등(1)
    file2      JSON,                                    -- 사전 보유 파일, 지식, 진행단계 등(2)
    cr         boolean default null,                                 -- 상업적 이용 여부
    amount     varchar(50)  ,                                    -- 서비스 길이, 수량 등
    addService varchar(50),                                    -- 추가로 필요한 서비스
    result     varchar(50),                                    -- 희망하는 파일 형태 등 결과물
    day        varchar(50),                                    -- 요일
    time       varchar(150),                                    -- 시간대
    age        varchar(20),                                    -- 연령
    sex        varchar(20),                                    -- 성별
    fav        varchar(20),                                    -- 선호 성별
    place      varchar(100),                                    -- 서비스 장소
    date       varchar(100),                                    -- 시작 날짜, 데드라인
    region     varchar(150),                                    -- 서비스 지역
    ref        varchar(200)                                     -- 직접 입력하는 추가사항
);
# insert into reqsend (writer, sort, type, sub, file1, file2, cr, amount, addService, result, day, time, age, sex, fav, place, date, region, ref)
# values (#{writer}, #{sort}, #{type}, #{sub}, #{file1}, #{file2}, #{cr}, #{amount}, #{addService}, #{result}, #{day}, #{time}, #{age},
#         #{sex}, #{fav}, #{place}, #{date}, #{region}, #{ref})

select * from reqsend;


-- 견적서 처리
최소 db 만들고 테스트 하기
견적서는
고객 db -> 고객 고유번호, 지역
고수 db -> 고수 고유번호, 지역, 분야
각 유저의 지역 -> 견적서 region FK
고수의 분야 -> 견적서 type FK

-- 0809 GitHub 통합

-- DB 의 개수만큼 DTO 를 설계해야 하는가?
-- 견적서 register 시
    GET 방식으로 register.jsp 화면 구현할 때
    1. 고객정보, 견적 분야 (type) 받아서 넘어가도록
    -> 서비스 분야 선택 시 Ajax 처리로 sort 선택 후 해당 type 검색, 데이터 넘기기
    2. type 마다 다른 질문사항 구현
    3. territory 는 페이지에 hidden 으로 구현해 뒀다가 onclick 이벤트로 div 안에 innerHTML 로 추가해보기

-- 견적서 read 시
    견적서 리스트 별 번호를 매기고 그 번호 div 에 따라 답장, 삭제 기능 구현
    지역 입력 시 option 태그 내 value 값 생성 -> 동적으로 받아서 db 저장 구현할 것


-- 견적서 register GetMapping 에 Ajax 처리로 지역 하위 카테고리 가져오기
코드 분석


document.addEventListener('DOMContentLoaded', function () {
// 페이지가 완전히 로드 된 후 실행 -> HTML 요소 준비
        // stateSelect가 변경될 때마다 AJAX 요청을 보내는 코드
        document.getElementById('stateSelect').addEventListener('change', function (event) {
        // stateSelect 에서 선택을 변경할 때 마다 이 이벤트리스너가 실행되도록

            // 선택된 state 값을 가져오기
            var state = this.value;
            // stateSelect 에서 새로운 값을 선택하면 this.value 를 통해 state 에 저장, Ajax 요청의 쿼리 파라미터로 사용
            // DOM 에서의 this 는 선택된 요소 -> 여기서는 #stateSelect

            // AJAX 요청
            fetch('/request/register/territories?state=' + state)
            // 서버에 Ajax 요청을 보내고 선택된 state 변수 값을 쿼리 파라미터로 전송, 응답을 받을때까지 기다리고 성공하면 Response 객체 반환
            // getTerritoriesByState 에서 ResponseBody 로  var state 를 던짐
                .then(response => response.json())
                // 컨트롤러의 requestService.findTerritory(state) 응답(리턴)은 JSON 형식으로 변환, data 변수에 저장
                // data 변수는 객체, 배열 등으로 구성될 수 있음
                .then(data => {
                    // districtSelect 업데이트
                    var district = document.getElementById('districtSelect');
                    district.innerHTML = ''; // 내부 <option> 요소 지우기

                    // 새로운 데이터를 추가
                    data.forEach(item => {
                    // 변수 data 는 컨트롤러에서 getTerritoriesByState 에서 ResponseBody 로 쓰인 변수, 결과 값을
                    // 서버에서 받은 데이터 배열 순회
                        var listItem = document.createElement('option');
                        // 순회하며 <option> 요소 생성
                        listItem.textContent = item.district;
                        listItem.value = item.district;
                        // <option> 요소의 텍스트 설정

                        // <select> 요소에 <option> 요소 추가
                        district.appendChild(listItem);
                    });
                })
                .catch(error => console.error('Error:', error));
        });

비동기 처리는 네트워크 요청과 응답 처리중 인터페이스가 멈추지 않도록 함
fetch() 메서드와 .json() 메서드는 Promise 라는것을 반환하는데 비동기 순서관리, 에러처리를 할 수 있음

/request/category 에서 보내는 RequestDTO 의 sort, type 이 URI 에 전부 노출되어 있음
URI 창 GET 파라미터 감추기

-- 고수 데이터로 견적서 read 페이지에 들어가면 각각의 받은 견적서에 modify, delete(무시) 버튼 만들기
견적서 read 페이지에서 다른 곳으로 redirect 될 때 견적서 id 를 들고 갈 수 있게
modify 실행 시, 견적서 list 에 보이는 데이터는 readonly, 고수 id, 제시금액, 고수 ref 저장 후 견적서 객체 저장으로
고객은 자신이 보낸 견적서를 다시 읽어올 수 있도록 myPage 나 myRequest 에서 페이지 구현

-- request 테이블에 고수가 답장하면서 사용할 금액, 설명, 파일 컬럼 추가
견적서에 답변이 달려 replier 항목이 null 이 아니라면 read 로 리다이렉트 후 보여지게 할 것
replier 항목이 고수의 id 와 일치할 경우 견적 답변 버튼 제한

-- 0814 해야할 일
1. 견적서 답변 시 DB 에는 들어가지만 read.jsp 에서 list.replier 처리하지 못하는 문제 해결 -> 리다이렉트 처리
2. list.replier 출력 후 gosu.id 와 비교하지 못하는 문제 해결 -> @PathVariable 의 변수 이름 통일로 처리
3. POST 처리 후 Redirect 되지 않는 문제 해결 -> URI 에 들어가는 변수를 encoding 으로 처리
4. category 선택 후 URI 에 데이터 노출되는 문제 해결

5. 답변한 견적서는 /read 가 아니라 다른 경로로 들어가게 할 것
6. read 목록에서 내 답변이 달린 견적서는 답장하는 버튼 비활성화 -> jstl 조건으로 처리

-- 오후 해야할 일
1. 견적서에 여러 고수들이 견적을 보낼 수 있어야 함 (견적서에는 답장한 고수들이 나열되고 최대 개수 설정해야 함)
2. 고수 별 자신이 보낸 견적을 확인해야 하므로 보낸 견적서 table, 고객은 보낸 견적서도 조회할 수 있어야 함
2.1 견적서 조회 화면에서는 고객이 만든 견적서의 내용이 항시 출력되고 고수가 보내는 데이터(금액, 설명 등) 이 테이블에 들어가야함
2.2 이 테이블은 견적서의 id, type, 고수의 id, 금액, Ref 가 들어가야 함

-- 0819 할 일
고객이 보낸 요청서에 답이 달린 경우 답장을 받은 요청서로 이동 -> 견적 읽기 클릭 시 AnsweredDTO 가져와서 출력


-- 0830 할 일
requestMapper 처리 시 readRequestByGosuId 에서 type 이 복수일 경우 sql 문 처리할 것 (배열)
gosuDTO 로 처리된 jsp (answer 등) 모두 ExpertDTO 로 처리할 것
견적 받은 요청서 -> 답장 및 대화 페이징 구현

-- 0902 할 일
여태까지 사용했던 request, answerRequest 테이블 컬럼 변경
    Request 테이블
    writer (varchar) -> userNum (int) from User
    replier (varchar) -> expertNum (int) from Expert 하지만 타입은 varchar(50)
    sort (varchar) -> CategoryName (varchar) 혹은 P_Id (int) where Null from category
    type (varchar) -> CategoryNum (int) from category
    sub, file1, file2, cr, amount, addService, result, day, time -> 유지
    age (varchar) -> (int) 혹은 유지
    sex, fav, place, date -> 유지
    region (varchar) -> district (varchar) 혹은 no (int) from territory
    ref (varchar) -> 유지


    answerRequest 테이블
    no, RequestId -> 유지
    type (varchar) -> CategoryNum (int) from category
    GosuId (varchar) -> expertNum (int) from Expert
    나머지 유지


이렇게 되면 두 테이블을 사용하는 requestMapper 에 대대적인 수정이 필요함 -> jsp 에서도 컬럼명 주의해서 변경할 것

requestList 에서 자세히 보기 404 문제 해결, 보낸 요청서에 category 가 int 로 뜨는 문제 해결
requestService.getRequest 해결할 것, requestMapper.select 해결할 것
DB 최신화, DTO 최신화, xml 정리할 것


List.jsp 의 handleButtonClick 스크립트 메서드 -> AnswerRequestDTO 수정하므로 바꿀 것


requestMapper.expert 에 userNum 던졌을 때 쿼리 실행되지만 ExpertVO 가 null 로 나오는 문제 해결
    mapper xml 에서 <result property="userNum" column="u.user_num"/> 오류 발생
    테이블명.컬럼명 이 아닌 단순 컬럼명으로 받아와야 인식 가능


RequestVO 를 AnswerController 에서 캐스팅 하지 못하는 문제
세션 대신 모델로 시도해 볼 것 -> 컨트롤러에서 해결함

answerRequest.jsp 에서 데이터 받고 AnswerRequestDTO 혹은 VO 로 넘겨서 사용하도록 설계